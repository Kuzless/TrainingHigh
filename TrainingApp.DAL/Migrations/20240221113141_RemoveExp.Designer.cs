// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingApp.DAL.DbConfiguration.DatabaseConfiguration;

#nullable disable

namespace TrainingApp.DAL.Migrations
{
    [DbContext(typeof(TrainingContext))]
    [Migration("20240221113141_RemoveExp")]
    partial class RemoveExp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Training__DAL_.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "6.04.01"
                        },
                        new
                        {
                            Id = 2,
                            Name = "6.04.02"
                        },
                        new
                        {
                            Id = 3,
                            Name = "6.04.03"
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Coefficient")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Qualifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Coefficient = 2f,
                            Name = "Professor"
                        },
                        new
                        {
                            Id = 2,
                            Coefficient = 1.5f,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Coefficient = 1f,
                            Name = "Master"
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("TeacherSalary")
                        .HasColumnType("real");

                    b.Property<int>("WorkedHoursId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkedHoursId");

                    b.ToTable("Salarys");
                });

            modelBuilder.Entity("Training__DAL_.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Street 1",
                            Email = "andriy@example.com",
                            GroupId = 1,
                            Name = "Andriy",
                            PhoneNumber = "+380999999991"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Street 2",
                            Email = "alex@example.com",
                            GroupId = 1,
                            Name = "Alex",
                            PhoneNumber = "+380999999992"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Street 3",
                            Email = "anna@example.com",
                            GroupId = 1,
                            Name = "Anna",
                            PhoneNumber = "+380999999993"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Street 4",
                            Email = "boris@example.com",
                            GroupId = 2,
                            Name = "Boris",
                            PhoneNumber = "+380999999994"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Street 5",
                            Email = "bella@example.com",
                            GroupId = 2,
                            Name = "Bella",
                            PhoneNumber = "+380999999995"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Street 6",
                            Email = "ben@example.com",
                            GroupId = 2,
                            Name = "Ben",
                            PhoneNumber = "+380999999996"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Street 7",
                            Email = "charlie@example.com",
                            GroupId = 3,
                            Name = "Charlie",
                            PhoneNumber = "+380999999997"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Street 8",
                            Email = "chloe@example.com",
                            GroupId = 3,
                            Name = "Chloe",
                            PhoneNumber = "+380999999998"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Street 9",
                            Email = "chris@example.com",
                            GroupId = 3,
                            Name = "Chris",
                            PhoneNumber = "+380999999999"
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Math"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Literature"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Biology"
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("PricePerHour")
                        .HasColumnType("real");

                    b.Property<int>("subjectNameId")
                        .HasColumnType("int");

                    b.Property<int>("subjectTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("subjectNameId");

                    b.HasIndex("subjectTypeId");

                    b.ToTable("SubjectTariffes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PricePerHour = 400f,
                            subjectNameId = 1,
                            subjectTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            PricePerHour = 350f,
                            subjectNameId = 2,
                            subjectTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            PricePerHour = 300f,
                            subjectNameId = 1,
                            subjectTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            PricePerHour = 250f,
                            subjectNameId = 2,
                            subjectTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            PricePerHour = 200f,
                            subjectNameId = 3,
                            subjectTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            PricePerHour = 150f,
                            subjectNameId = 3,
                            subjectTypeId = 2
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Practice"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Lecture"
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.TeacherInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QualificationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QualificationId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Gagarina Street 3",
                            Email = "shev1@gmail.com",
                            Name = "Shevchenko D.I",
                            PhoneNumber = "+380999999991",
                            QualificationId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "Lenina Street 4",
                            Email = "ivan1@gmail.com",
                            Name = "Ivanenko A.V",
                            PhoneNumber = "+380999999992",
                            QualificationId = 1
                        },
                        new
                        {
                            Id = 3,
                            Address = "Pushkina Street 5",
                            Email = "petro1@gmail.com",
                            Name = "Petrova L.M",
                            PhoneNumber = "+380999999993",
                            QualificationId = 2
                        },
                        new
                        {
                            Id = 4,
                            Address = "Kirova Street 6",
                            Email = "sidor1@gmail.com",
                            Name = "Sidorov G.P",
                            PhoneNumber = "+380999999994",
                            QualificationId = 2
                        },
                        new
                        {
                            Id = 5,
                            Address = "Chekhova Street 7",
                            Email = "kuzne1@gmail.com",
                            Name = "Kuznetsova S.I",
                            PhoneNumber = "+380999999995",
                            QualificationId = 3
                        },
                        new
                        {
                            Id = 6,
                            Address = "Tolstogo Street 8",
                            Email = "moroz1@gmail.com",
                            Name = "Morozov V.K",
                            PhoneNumber = "+380999999996",
                            QualificationId = 3
                        });
                });

            modelBuilder.Entity("Training__DAL_.Models.WorkedHours", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectTariffId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("WorkedHoursDone")
                        .HasColumnType("int");

                    b.Property<int>("WorkedHoursPlanned")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectTariffId");

                    b.HasIndex("TeacherId");

                    b.ToTable("WorkedHours");
                });

            modelBuilder.Entity("Training__DAL_.Models.Salary", b =>
                {
                    b.HasOne("Training__DAL_.Models.WorkedHours", "WorkedHours")
                        .WithMany("Salarys")
                        .HasForeignKey("WorkedHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkedHours");
                });

            modelBuilder.Entity("Training__DAL_.Models.Student", b =>
                {
                    b.HasOne("Training__DAL_.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectTariff", b =>
                {
                    b.HasOne("Training__DAL_.Models.SubjectName", "subjectName")
                        .WithMany("SubjectTariffs")
                        .HasForeignKey("subjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training__DAL_.Models.SubjectType", "subjectType")
                        .WithMany("SubjectTariffs")
                        .HasForeignKey("subjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("subjectName");

                    b.Navigation("subjectType");
                });

            modelBuilder.Entity("Training__DAL_.Models.TeacherInfo", b =>
                {
                    b.HasOne("Training__DAL_.Models.Qualification", "Qualification")
                        .WithMany("TeacherInfos")
                        .HasForeignKey("QualificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("Training__DAL_.Models.WorkedHours", b =>
                {
                    b.HasOne("Training__DAL_.Models.Group", "Group")
                        .WithMany("WorkedHours")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training__DAL_.Models.SubjectTariff", "SubjectTariff")
                        .WithMany("workedHours")
                        .HasForeignKey("SubjectTariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training__DAL_.Models.TeacherInfo", "Teacher")
                        .WithMany("WorkedHours")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("SubjectTariff");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Training__DAL_.Models.Group", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("WorkedHours");
                });

            modelBuilder.Entity("Training__DAL_.Models.Qualification", b =>
                {
                    b.Navigation("TeacherInfos");
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectName", b =>
                {
                    b.Navigation("SubjectTariffs");
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectTariff", b =>
                {
                    b.Navigation("workedHours");
                });

            modelBuilder.Entity("Training__DAL_.Models.SubjectType", b =>
                {
                    b.Navigation("SubjectTariffs");
                });

            modelBuilder.Entity("Training__DAL_.Models.TeacherInfo", b =>
                {
                    b.Navigation("WorkedHours");
                });

            modelBuilder.Entity("Training__DAL_.Models.WorkedHours", b =>
                {
                    b.Navigation("Salarys");
                });
#pragma warning restore 612, 618
        }
    }
}
